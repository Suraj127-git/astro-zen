---
import { SITE_CONTENT } from "@config";
import Hero from "@components/Hero.astro";
import Layout from "@layouts/Layout.astro";
import Experience from "@components/Experience.astro";
import Blog from "@components/Blog.astro";
import Project from "@components/Project.astro";
import About from "@components/About.astro";
---

<Layout>
  <Hero {...SITE_CONTENT.hero} />
  <Experience experience={SITE_CONTENT.experience} />
  <Blog blog={SITE_CONTENT.blog} />
  <Project projects={SITE_CONTENT.projects} />
  <About {...SITE_CONTENT.about} name={SITE_CONTENT.hero.name} />
</Layout>

<script>
  async function initAnimations() {
    try {
      const gsap = (await import('gsap')).default;
      const ScrollTrigger = (await import('gsap/ScrollTrigger')).default;
      const { TextPlugin } = await import('gsap/TextPlugin');
      
      gsap.registerPlugin(ScrollTrigger, TextPlugin);

      // Hero section enhanced animation
      const heroTimeline = gsap.timeline({ defaults: { ease: "power4.out" }});
      
      heroTimeline
        .from('#hero h1', {
          y: 100,
          opacity: 0,
          duration: 1.2,
          rotateX: 80,
          transformOrigin: "0% 50% -50",
          ease: "power4.out"
        })
        .from('#hero p:first-of-type', {
          y: 50,
          opacity: 0,
          duration: 1,
          scale: 0.9,
        }, "-=0.8")
        .from('#hero p:last-of-type', {
          x: -50,
          opacity: 0,
          duration: 0.8,
        }, "-=0.6")
        .from('#hero a', {
          scale: 0,
          opacity: 0,
          duration: 0.6,
          ease: "back.out(1.7)"
        }, "-=0.4");

      // Experience section enhanced animation
      const experienceItems = document.querySelectorAll('#experience .mb-10');
      
      if (experienceItems.length) {
        experienceItems.forEach((item, index) => {
          const tl = gsap.timeline({
            scrollTrigger: {
              trigger: item,
              start: 'top 80%',
              end: 'bottom 20%',
              toggleActions: 'play none none reverse'
            }
          });

          tl.from(item.querySelector('h3'), {
            x: -50,
            opacity: 0,
            duration: 0.8,
            ease: "power3.out"
          })
          .from(item.querySelector('.text-primary'), {
            y: 20,
            opacity: 0,
            duration: 0.5,
          }, "-=0.4")
          .from(item.querySelector('.text-neutral'), {
            opacity: 0,
            duration: 0.5,
            clipPath: "polygon(0 0, 0 0, 0 100%, 0% 100%)",
            ease: "power2.out"
          }, "-=0.2");
        });

        // Parallax effect for experience section
        gsap.to('#experience', {
          scrollTrigger: {
            trigger: '#experience',
            start: 'top bottom',
            end: 'bottom top',
            scrub: 1
          },
          y: (i, target) => -target.offsetHeight * 0.1,
          ease: "none"
        });
      }

      // Rest of the animations remain unchanged
      const blogItems = document.querySelectorAll('#blog .sticky');
      if (blogItems.length) {
        gsap.from(blogItems, {
          y: 50,
          opacity: 0,
          stagger: 0.2,
          duration: 1,
          scrollTrigger: {
            trigger: '#blog',
            start: 'top 75%',
          }
        });
      }

      // Project section animation
      const projectItems = document.querySelectorAll('#projects .rounded-2xl');
      if (projectItems.length) {
        gsap.from(projectItems, {
          scale: 0.9,
          opacity: 0,
          stagger: 0.2,
          duration: 0.8,
          scrollTrigger: {
            trigger: '#projects',
            start: 'top 75%',
          }
        });
      }

      // About section animation
      const aboutSection = document.querySelector('#about .flex');
      if (aboutSection) {
        gsap.from(aboutSection, {
          opacity: 0,
          y: 30,
          duration: 1,
          scrollTrigger: {
            trigger: '#about',
            start: 'top 75%',
          }
        });
      }
    } catch (error) {
      console.error('Error in animations:', error);
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    initAnimations();
  });
</script>
