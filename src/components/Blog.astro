---
import Section from "./Section.astro";
import { Image } from "astro:assets";
import type { ProjectProps } from "@types";

interface Props {
  blog: ProjectProps[];
}

const { blog } = Astro.props;
---

<Section text="Featured Blog" href="blog">
  {
    blog.map(({ name, summary, image, linkPreview }, index) => {
      const top = 98 + index * 40;
      return (
        <div
          style={`top: ${top}px;`}
          class="sticky rounded-2xl border border-neutral/20 bg-black mb-12 blog-card"
        >
          <div class="rounded-2xl border border-neutral/20 bg-black">
            <div class="w-full h-[580px] md:h-96 relative z-[1] bg-[#1c232d]/85 bg-difu before:content-[''] before:rounded-2xl before:absolute before:z-[-1] before:opacity-[5%] before:inset-0 before:bg-[url(/raja.png)] before:bg-repeat before:bg-[length:128px] rounded-2xl grid grid-rows-2 sm:grid-rows-1 sm:grid-cols-2">
              <div class="px-6 pt-12 blog-content">
                <h3 class="text-3xl font-medium font-serif mb-5 text-primary blog-title">
                  {name}
                </h3>
                <p class="text-neutral text-base blog-summary">{summary}</p>
                <div class="pt-10 flex gap-5 text-white">
                  <a
                    href={linkPreview}
                    target="_blank"
                    class="blog-link hover:underline after:content-[url(/external.svg)] after:relative after:bottom-[-5px]"
                  >
                    Preview
                  </a>
                </div>
              </div>
              <div class="flex items-end justify-end overflow-hidden blog-image-container">
                <Image
                  src={image}
                  width={580}
                  height={580}
                  alt={name}
                  class="object-cover rounded-br-2xl blog-image"
                />
              </div>
            </div>
          </div>
        </div>
      );
    })
  }
</Section>

<script>
  async function initBlogAnimations() {
    const gsap = (await import('gsap')).default;
    const ScrollTrigger = (await import('gsap/ScrollTrigger')).default;
    
    gsap.registerPlugin(ScrollTrigger);

    document.querySelectorAll('.blog-card').forEach((card) => {
      const tl = gsap.timeline({
        scrollTrigger: {
          trigger: card,
          start: "top 75%",
          toggleActions: "play none none reverse"
        }
      });

      // Card entrance animation
      tl.from(card, {
        opacity: 0,
        scale: 0.95,
        duration: 0.8,
        ease: "power3.out"
      })
      // Title animation
      .from(card.querySelector('.blog-title'), {
        y: 30,
        opacity: 0,
        duration: 0.6,
        ease: "back.out(1.7)"
      }, "-=0.4")
      // Summary text reveal
      .from(card.querySelector('.blog-summary'), {
        opacity: 0,
        clipPath: "polygon(0 0, 0 0, 0 100%, 0% 100%)",
        duration: 0.8,
      }, "-=0.3")
      // Image slide in
      .from(card.querySelector('.blog-image'), {
        x: 100,
        opacity: 0,
        duration: 0.8,
        ease: "power2.out"
      }, "-=0.6")
      // Link pop up
      .from(card.querySelector('.blog-link'), {
        scale: 0,
        opacity: 0,
        duration: 0.4,
        ease: "back.out(2)"
      }, "-=0.2");

      // Hover effect
      card.addEventListener('mouseenter', () => {
        gsap.to(card.querySelector('.blog-image'), {
          scale: 1.05,
          duration: 0.4,
          ease: "power2.out"
        });
      });

      card.addEventListener('mouseleave', () => {
        gsap.to(card.querySelector('.blog-image'), {
          scale: 1,
          duration: 0.4,
          ease: "power2.out"
        });
      });
    });
  }

  document.addEventListener('DOMContentLoaded', initBlogAnimations);
</script>

<style>
  .hide-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  .hide-scrollbar::-webkit-scrollbar {
    display: none;
  }
</style>
